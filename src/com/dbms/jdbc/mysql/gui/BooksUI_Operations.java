/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dbms.jdbc.mysql.gui;

import javax.swing.JOptionPane;

/**
 *
 * @author Jur Yel
 */

import com.dbms.jdbc.mysql.core.Books;
import com.dbms.jdbc.mysql.dao.BooksDAO;
import com.dbms.jdbc.mysql.dao.IssuedBooksDAO;
import com.dbms.jdbc.mysql.dao.AccountsDAO;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import com.dbms.jdbc.mysql.core.IssuedBooks;
import java.util.ArrayList;

public class BooksUI_Operations extends javax.swing.JDialog {

    /**
     * Creates new form BooksUI_Operations
     */
    private static final DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    
    private BooksUI bookUI;
    private Books book;
    private BooksDAO bookDAO;
    private IssuedBooksDAO issuedDAO;
    private AccountsDAO accDAO;
    private String User_ID;
    private String User_Name;
    private String operation;
    
    public BooksUI_Operations(String oprtn,String id, String name, Books bk, BooksDAO bkDAO,BooksUI ui){
        try{
            issuedDAO = new IssuedBooksDAO();
            accDAO = new AccountsDAO();
        }
        catch(Exception exc){
            JOptionPane.showMessageDialog(BooksUI_Operations.this,"DAO Failed: "+exc.getMessage(),"DAO Error",JOptionPane.ERROR_MESSAGE);
        }
        initComponents();
        setLocationRelativeTo(ui);
        User_ID = id;
        User_Name = name;
        book = bk;
        bookDAO = bkDAO;
        bookUI = ui;
        operation = oprtn;
        if(oprtn.equalsIgnoreCase("add")){
            setTitle("Add Books");
            jbtn_Add.setText("Add Book");
        }
        else if(oprtn.equalsIgnoreCase("update")){
            setTitle("Update Books");
            jbtn_Add.setText("Update Book");
            populateGUI(book);
            jtxt_BookID.setEnabled(false);
        }
        else if(oprtn.equalsIgnoreCase("delete")){
            setTitle("Delete Books");
            jbtn_Add.setText("Delete Book");
            populateGUI(book);
            disableAll();
        }
        else if(oprtn.equalsIgnoreCase("borrow")){
            setTitle("Borrow Book");
            jbtn_Add.setText("Borrow Book");
            populateGUI(book);
            disableAll();
        }
    }
    
    public BooksUI_Operations(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtxt_BookID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jComboBox_Category = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jtxt_BookTitle = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jtxt_BookAuthor = new javax.swing.JTextField();
        jtxt_Year = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jSpinner_Rack = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jSpinner_Quantity = new javax.swing.JSpinner();
        jbtn_Add = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add Books");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jLabel1.setText("Category:");

        jtxt_BookID.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jtxt_BookID.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel2.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jLabel2.setText("Book ID:");

        jComboBox_Category.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jComboBox_Category.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Computer Studies", "Engineering and Architecture", "Arts and Sciences", "Business Management", "Politics", "Literature", "History" }));

        jLabel3.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jLabel3.setText("Book Title:");

        jtxt_BookTitle.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jtxt_BookTitle.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel4.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jLabel4.setText("Book Author:");

        jtxt_BookAuthor.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jtxt_BookAuthor.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jtxt_Year.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jtxt_Year.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel5.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jLabel5.setText("Year Published:");

        jSpinner_Rack.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jSpinner_Rack.setModel(new javax.swing.SpinnerNumberModel(1, null, 14, 1));
        jSpinner_Rack.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jLabel6.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jLabel6.setText("Rack:");

        jLabel7.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jLabel7.setText("Quantity:");

        jSpinner_Quantity.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jSpinner_Quantity.setModel(new javax.swing.SpinnerNumberModel(1, null, 14, 1));
        jSpinner_Quantity.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jbtn_Add.setBackground(new java.awt.Color(0, 0, 0));
        jbtn_Add.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jbtn_Add.setForeground(new java.awt.Color(255, 255, 255));
        jbtn_Add.setText("Add Book");
        jbtn_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_AddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jtxt_BookTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBox_Category, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jtxt_BookID, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSpinner_Rack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jtxt_BookAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jSpinner_Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtxt_Year, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(jbtn_Add, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox_Category, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxt_BookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxt_BookTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxt_BookAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner_Rack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxt_Year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner_Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(jbtn_Add, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtn_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_AddActionPerformed
            if(operation.equalsIgnoreCase("add")){
                addBook();
            }
            else if(operation.equalsIgnoreCase("delete")){
                deleteBook();
            }
            else if(operation.equalsIgnoreCase("update")){
                updateBook();
            }
            else if(operation.equalsIgnoreCase("borrow")){
                borrowBook();
            }
    }//GEN-LAST:event_jbtn_AddActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BooksUI_Operations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BooksUI_Operations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BooksUI_Operations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BooksUI_Operations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                BooksUI_Operations dialog = new BooksUI_Operations(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBox_Category;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSpinner jSpinner_Quantity;
    private javax.swing.JSpinner jSpinner_Rack;
    private javax.swing.JButton jbtn_Add;
    private javax.swing.JTextField jtxt_BookAuthor;
    private javax.swing.JTextField jtxt_BookID;
    private javax.swing.JTextField jtxt_BookTitle;
    private javax.swing.JTextField jtxt_Year;
    // End of variables declaration//GEN-END:variables

    private void addBook(){
        String cat = jComboBox_Category.getSelectedItem().toString();
        String bookID = jtxt_BookID.getText().trim();
        String title = jtxt_BookTitle.getText().trim();
        String author = jtxt_BookAuthor.getText().trim();
        int rack = Integer.parseInt(jSpinner_Rack.getValue().toString());
        int year = Integer.parseInt(jtxt_Year.getText().trim());
        int qty = Integer.parseInt(jSpinner_Quantity.getValue().toString());
        
        try{
            if(bookDAO.checkBookID(bookID)){
                bookDAO.AddToQuantity(bookID);
                bookUI.refreshBooksTable();
                setVisible(false);
                dispose();
                JOptionPane.showMessageDialog(bookUI,"Book added successfully!","Add Success",JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                Books theBook = new Books(cat,bookID,title,author,rack,year,qty);
                bookDAO.AddBooks(theBook,User_ID);
                bookUI.refreshBooksTable();
                setVisible(false);
                dispose();
                JOptionPane.showMessageDialog(bookUI,"Book added successfully!","Add Success",JOptionPane.INFORMATION_MESSAGE);
            }
        }
        catch(Exception exc){
            JOptionPane.showMessageDialog(BooksUI_Operations.this,"Add Failed: "+exc.getMessage(),"Add Error",JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    private void updateBook(){
        String cat = jComboBox_Category.getSelectedItem().toString();
        String id = jtxt_BookID.getText().trim();
        String title = jtxt_BookTitle.getText().trim();
        String author = jtxt_BookAuthor.getText().trim();
        int rack = Integer.parseInt(jSpinner_Rack.getValue().toString());
        int year = Integer.parseInt(jtxt_Year.getText().trim());
        int qty = Integer.parseInt(jSpinner_Quantity.getValue().toString());
        
        try{
            Books theBook = new Books(cat,id,title,author,rack,year,qty);
            
            bookDAO.UpdateBooks(theBook,User_ID);
            bookUI.refreshBooksTable();
            setVisible(false);
            dispose();
            JOptionPane.showMessageDialog(bookUI,"Book updated successfully!","Update Success",JOptionPane.INFORMATION_MESSAGE);
        }
        catch(Exception exc){
            JOptionPane.showMessageDialog(BooksUI_Operations.this,"Update Failed: "+exc.getMessage(),"Update Error",JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    private void deleteBook(){
        String id = jtxt_BookID.getText();
        
        try{
            if(bookDAO.checkIfBorrowed(id)){
                /* Fetch borrowers and Confirm Delete */
               if(retrieveUsersBorrowing()){
                   bookDAO.DeleteBooks(id);
                   bookUI.refreshBooksTable();
                   setVisible(false);
                   JOptionPane.showMessageDialog(bookUI,"Book deleted successfully!","Delete Success",JOptionPane.INFORMATION_MESSAGE);
               }
               
            }
            else{
                bookDAO.DeleteBooks(id);
                bookUI.refreshBooksTable();
                setVisible(false);
                dispose();
                JOptionPane.showMessageDialog(BooksUI_Operations.this, "Book deleted successfully!","Delete Success",JOptionPane.ERROR_MESSAGE);
            }
        }
        catch(Exception exc){
            JOptionPane.showMessageDialog(BooksUI_Operations.this,"Delete Failed: "+ exc.getMessage(),"Delete Error",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void borrowBook(){
        String id = jtxt_BookID.getText();
        String userID = User_ID;
        Date dateBrwd = new Date();
        Date dateDue = new Date();
        
        sdf.format(dateBrwd);
        
        int year = dateBrwd.getYear();
        int month = dateBrwd.getMonth();
        int day = dateBrwd.getDate();
        
        dateDue.setYear(year);
        dateDue.setMonth(month);
        dateDue.setDate((day+5));
        
        IssuedBooks issuedBook = new IssuedBooks(id,null,userID,dateBrwd,dateDue);
        
        try{
            if(accDAO.checkIfBlocked(userID)){
                setVisible(false);
                JOptionPane.showMessageDialog(bookUI, "Unable to borrow book, account has been blocked!","Issued Error",JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                if(issuedDAO.checkIfAlreadyBorrowed(User_ID, id)){
                /* Check if user already borrowed the book */
                
                    setVisible(false);
                    retrieveIssuedBook();
                }
                else{
                    /* Perform Operation */
                    int total = issuedDAO.getNumberOfBooksBorrowed(User_ID);
                    int quantity = bookDAO.getBookQuantity(id);
                    if(total <= 5){
                       issuedDAO.IssueBook(issuedBook,User_ID,quantity);
                       
                       bookUI.refreshBooksTable();
                       setVisible(false);
                       JOptionPane.showMessageDialog(bookUI,
                                "Book borrowed successfully!\n\n"
                              + "\tDate Borrowed: " + dateBrwd + "\n"
                              + "\tDate Due: "+ dateDue + "\n\n"
                              + "Knowledge is Power!","Issue Success",JOptionPane.INFORMATION_MESSAGE);
                    }
                    else{
                        setVisible(false);
                        bookUI.refreshBooksTable();
                        JOptionPane.showMessageDialog(bookUI,"You can only borrow five books at most!","Issue Error",JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
            
        }
        catch(Exception exc){
            JOptionPane.showMessageDialog(BooksUI_Operations.this,"Issue Failed: "+exc.getMessage(),"Issue Error",JOptionPane.ERROR_MESSAGE);
        }
    }
    private boolean retrieveUsersBorrowing(){
        String bkID = jtxt_BookID.getText();
        String brwdBy = new String();
        String range = new String();
        try{
            ArrayList<IssuedBooks> issuedBooks = issuedDAO.getAllIssuedBooks();
            int totalUsers = issuedBooks.size();
            String fullname = accDAO.getFullName(issuedBooks.get(0).getUserID());
            if(totalUsers == 1){
                brwdBy = "a student";
                range = "1/1";
            }
            else{
                brwdBy = totalUsers + " students";
                range = "1/"+totalUsers;
            }
            
            JOptionPane.showConfirmDialog(BooksUI_Operations.this,
                    "Book has been by " + brwdBy + "\n\n"
                   + "\t"+ range + "\n"
                   + "\t\tUser ID: " + issuedBooks.get(0).getUserID() + "\n"
                   + "\t\tUser Name: " + fullname + "\n"
                   + "\t\tDate Borrowed: " + issuedBooks.get(0).getDateBorrowed() + "\n"
                   + "\t\tDate Due: " + issuedBooks.get(0).getDateDue() + "\n\n"
                   + "Retrieve issued book?","Book Retrieval",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
            
            if(JOptionPane.YES_NO_OPTION == JOptionPane.YES_OPTION){
                issuedDAO.retrieveIssuedBook(bkID);
                JOptionPane.showMessageDialog(BooksUI_Operations.this,"Book retrieved successfully!","Retrieval Success",JOptionPane.INFORMATION_MESSAGE);
                return true;
            }
            else if(JOptionPane.YES_NO_OPTION == JOptionPane.NO_OPTION){
                return false;
            }
                           
        }
        catch(Exception exc){
            exc.printStackTrace();
        }
        return true;
    }
    private void retrieveIssuedBook(){
        String bkID = jtxt_BookID.getText();
        try{
            String title = issuedDAO.getBookTitleByUserID(bkID);
            String brwd = issuedDAO.getBookDateBorrowed(User_ID, bkID);
            String due = issuedDAO.getBookDateDue(User_ID, bkID);
            
            JOptionPane.showMessageDialog(bookUI, 
                        "You already borrowed this book!\n\n"
                      + "\t\tBook ID: " + bkID + "\n"
                      + "\t\tBook Title: " + title + "\n"
                      + "\t\tDate Borrowed: " + brwd + "\n"
                      + "\t\tDate Due: " + due + "\n\n"
                      + "Borrow a different book.","Issue Error",JOptionPane.ERROR_MESSAGE);
        }
        catch(Exception exc){
            JOptionPane.showMessageDialog(BooksUI_Operations.this,"Retrieval Failed: "+exc.getMessage(),"Retrieval Error",JOptionPane.ERROR_MESSAGE);
//            exc.printStackTrace();
        }
    }
    
    private void populateGUI(Books bk){
        
        jComboBox_Category.setSelectedItem(bk.getBookCategory());
        jtxt_BookID.setText(bk.getBookID());
        jtxt_BookTitle.setText(bk.getBookTitle());
        jtxt_BookAuthor.setText(bk.getBookAuthor());
        jSpinner_Rack.setValue(bk.getRack());
        jtxt_Year.setText(String.valueOf(bk.getYearPublished()));
        jSpinner_Quantity.setValue(bk.getQuantity());
    }
    
    private void disableAll(){
        jComboBox_Category.setEnabled(false);
        jtxt_BookID.setEnabled(false);
        jtxt_BookTitle.setEnabled(false);
        jtxt_BookAuthor.setEnabled(false);
        jSpinner_Rack.setEnabled(false);
        jtxt_Year.setEnabled(false);
        jSpinner_Quantity.setEnabled(false);
    }
}
