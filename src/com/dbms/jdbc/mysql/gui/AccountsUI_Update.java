/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dbms.jdbc.mysql.gui;

/**
 *
 * @author Jur Yel
 */
import com.dbms.jdbc.mysql.core.Accounts;
import com.dbms.jdbc.mysql.core.IssuedBooks;
import com.dbms.jdbc.mysql.dao.AccountsDAO;
import com.dbms.jdbc.mysql.dao.IssuedBooksDAO;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;

public class AccountsUI_Update extends javax.swing.JDialog {

    /**
     * Creates new form AccountsUI_Update
     */
    private Accounts account;
    private AccountsDAO accDAO;
    private IssuedBooksDAO issuedDAO;
    private AccountsUI accUI;
    private String UserID;
    private String operation;
    
    public AccountsUI_Update(String oprtn,String userID,Accounts acc,AccountsDAO dao, AccountsUI ui){
        try{
            issuedDAO = new IssuedBooksDAO();
        }
        catch(Exception exc){
            JOptionPane.showMessageDialog(AccountsUI_Update.this,"DAO Failed: "+exc.getMessage(),"DAO Error",JOptionPane.ERROR_MESSAGE);
        }
        initComponents();
        setLocationRelativeTo(ui);
        UserID = userID;
        account = acc;
        accUI = ui;
        accDAO = dao;
        operation = oprtn;
        populateGUI(account);
        if(operation.equalsIgnoreCase("delete")){
            jComboBox_Position.setEnabled(false);
            setTitle("Delete Account");
            jbtn_Execute.setText("Delete");
        }
        else if(operation.equalsIgnoreCase("assign")){
            jComboBox_Position.setEnabled(true);
            setTitle("Assign Student");
            jbtn_Execute.setText("Assign");
        }
        else if(operation.equalsIgnoreCase("block")){
            jComboBox_Position.setEnabled(false);
            jbtn_Execute.setText("Block");
            setTitle("Block Account");
        }
        else if(operation.equalsIgnoreCase("unblock")){
            jComboBox_Position.setEnabled(false);
            jbtn_Execute.setText("Unblock");
            setTitle("Unblock Account");
        }
    }
    
    public AccountsUI_Update(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtxt_UserID = new javax.swing.JTextField();
        jtxt_FirstName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jtxt_LastName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox_Position = new javax.swing.JComboBox<>();
        jbtn_Execute = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Assign Student");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setFont(new java.awt.Font("Josefin Sans", 0, 14)); // NOI18N
        jLabel1.setText("User ID:");

        jtxt_UserID.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jtxt_UserID.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jtxt_UserID.setEnabled(false);

        jtxt_FirstName.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jtxt_FirstName.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jtxt_FirstName.setEnabled(false);

        jLabel2.setFont(new java.awt.Font("Josefin Sans", 0, 14)); // NOI18N
        jLabel2.setText("First Name:");

        jtxt_LastName.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jtxt_LastName.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jtxt_LastName.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("Josefin Sans", 0, 14)); // NOI18N
        jLabel3.setText("Last Name:");

        jLabel4.setFont(new java.awt.Font("Josefin Sans", 0, 14)); // NOI18N
        jLabel4.setText("Position:");

        jComboBox_Position.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jComboBox_Position.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Student", "Student Assistant", "Administrator" }));

        jbtn_Execute.setBackground(new java.awt.Color(0, 0, 0));
        jbtn_Execute.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jbtn_Execute.setForeground(new java.awt.Color(255, 255, 255));
        jbtn_Execute.setText("Assign");
        jbtn_Execute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_ExecuteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtxt_FirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtxt_UserID, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbtn_Execute, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jComboBox_Position, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jtxt_LastName, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtxt_UserID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtxt_FirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtxt_LastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox_Position, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jbtn_Execute, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtn_ExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_ExecuteActionPerformed
        if(operation.equalsIgnoreCase("delete")){
            deleteAccount();
        }
        else if(operation.equalsIgnoreCase("assign")){
            assign();
        }
        else{
            blockAccount();
        }
    }//GEN-LAST:event_jbtn_ExecuteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountsUI_Update.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountsUI_Update.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountsUI_Update.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountsUI_Update.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AccountsUI_Update dialog = new AccountsUI_Update(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBox_Position;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jbtn_Execute;
    private javax.swing.JTextField jtxt_FirstName;
    private javax.swing.JTextField jtxt_LastName;
    private javax.swing.JTextField jtxt_UserID;
    // End of variables declaration//GEN-END:variables
    
    private void assign(){
        String userID = jtxt_UserID.getText();
        String first = jtxt_FirstName.getText();
        String last = jtxt_LastName.getText();
        String position = jComboBox_Position.getSelectedItem().toString();
        
        try{
            if(position.equals("Student")){
                JOptionPane.showMessageDialog(AccountsUI_Update.this, "Select a position","Assign Error",JOptionPane.ERROR_MESSAGE);
            }
            else{
                    
                accDAO.AssignStudent(userID,UserID, position);
                
                accUI.refreshAccountsTable();
                setVisible(false);
                dispose();
                reset();
                JOptionPane.showMessageDialog(accUI,first + " " + last + " is now assigned as " + position,"Assignment Success",JOptionPane.INFORMATION_MESSAGE);
               
                
            }   
        }
        catch(Exception exc){
            JOptionPane.showMessageDialog(AccountsUI_Update.this,"Assignment Failed: "+ exc.getMessage(),"Assign Error",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void deleteAccount(){
        String userID = jtxt_UserID.getText();
        String position = jComboBox_Position.getSelectedItem().toString();
        String first = jtxt_FirstName.getText();
        String last = jtxt_LastName.getText();
        
        try{
            if(position.equals("Administrator")){
                
                if((JOptionPane.showConfirmDialog(AccountsUI_Update.this, first + " " + last 
                        + " is an Admin.\n Are you sure to delete?","Confirm Delete",
                        JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE))== JOptionPane.YES_OPTION){
                     accDAO.DeleteAccount(userID);
                    
                    if(issuedDAO.checkIfUserBorrowed(userID)){
                        ArrayList<IssuedBooks> issuedBooks = issuedDAO.getIssuedBooksByUser(userID);
                        int total = issuedBooks.size();
                        String brwd = new String();
                        String range = new String();
                        if(total == 1){
                            brwd = "a book";
                            range = "1/1";
                        }
                        else{
                            brwd = total + " books";
                            range = "1/"+total;
                        }

                        
                        if((JOptionPane.showConfirmDialog(AccountsUI_Update.this,
                                "User has borrowed " + brwd + ":\n\n"
                              + "\t"+range + "\n"
                              + "\t\tBook ID: " + issuedBooks.get(0).getBookID() + "\n"
                              + "\t\tTitle: " + issuedBooks.get(0).getBookTitle() + "\n"
                              + "\t\tDate Borrowed: " + convertUtilToSQL(issuedBooks.get(0).getDateBorrowed()) + "\n"
                              + "\t\tDate Due: " + convertUtilToSQL(issuedBooks.get(0).getDateDue()) + "\n\n"
                              + "Retrieve issued books?","Delete Error",
                              JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE)) == JOptionPane.YES_OPTION){
                            issuedDAO.retrieveIssuedBooksByUser(userID);
                            JOptionPane.showMessageDialog(AccountsUI_Update.this,"Books retrieved successfully!",
                                    "Retrieval Success",JOptionPane.INFORMATION_MESSAGE);
                            accDAO.DeleteAccount(userID);

                            accUI.refreshAccountsTable();
                            setVisible(false);
                            dispose();
                            reset();
                            JOptionPane.showMessageDialog(accUI, "Account deleted successfully!","Delete Success",JOptionPane.INFORMATION_MESSAGE);
                            
                        }
                    }
                   else{
                            accDAO.DeleteAccount(userID);

                            accUI.refreshAccountsTable();
                            setVisible(false);
                            dispose();
                            reset();
                            JOptionPane.showMessageDialog(accUI, "Account deleted successfully!","Delete Success",JOptionPane.INFORMATION_MESSAGE);
                            
                   }
                }
                   
            }
            else if(position.equals("Student Assistant")){
                
                 
                if((JOptionPane.showConfirmDialog(AccountsUI_Update.this, first + " " + last 
                        + " is a Student Assistant.\n Are you sure to delete?","Confirm Delete",
                        JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE))== JOptionPane.YES_OPTION){
                   if(issuedDAO.checkIfUserBorrowed(userID)){
                        ArrayList<IssuedBooks> issuedBooks = issuedDAO.getIssuedBooksByUser(userID);
                        int total = issuedBooks.size();
                        String brwd = new String();
                        String range = new String();
                        if(total == 1){
                            brwd = "a book";
                            range = "1/1";
                        }
                        else{
                            brwd = total + " books";
                            range = "1/"+total;
                        }

                        if((JOptionPane.showConfirmDialog(AccountsUI_Update.this,
                                "User has borrowed " + brwd + ":\n\n"
                              + "\t"+range + "\n"
                              + "\t\tBook ID: " + issuedBooks.get(0).getBookID() + "\n"
                              + "\t\tTitle: " + issuedBooks.get(0).getBookTitle() + "\n"
                              + "\t\tDate Borrowed: " + convertUtilToSQL(issuedBooks.get(0).getDateBorrowed()) + "\n"
                              + "\t\tDate Due: " + convertUtilToSQL(issuedBooks.get(0).getDateDue()) + "\n\n"
                              + "Retrieve issued books?","Delete Error",
                              JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE)) == JOptionPane.YES_OPTION){
                            issuedDAO.retrieveIssuedBooksByUser(userID);
                            JOptionPane.showMessageDialog(AccountsUI_Update.this,"Books retrieved successfully!",
                                    "Retrieval Success",JOptionPane.INFORMATION_MESSAGE);
                            accDAO.DeleteAccount(userID);

                            accUI.refreshAccountsTable();
                            setVisible(false);
                            dispose();
                            reset();
                            JOptionPane.showMessageDialog(accUI, "Account deleted successfully!","Delete Success",JOptionPane.INFORMATION_MESSAGE);
                            
                        }
                    }
                   else{
                            accDAO.DeleteAccount(userID);

                            accUI.refreshAccountsTable();
                            setVisible(false);
                            dispose();
                            reset();
                            JOptionPane.showMessageDialog(accUI, "Account deleted successfully!","Delete Success",JOptionPane.INFORMATION_MESSAGE);
                            
                   }
                }
                    
            }
            else{
                   if(issuedDAO.checkIfUserBorrowed(userID)){
                        ArrayList<IssuedBooks> issuedBooks = issuedDAO.getIssuedBooksByUser(userID);
                        int total = issuedBooks.size();
                        String brwd = new String();
                        String range = new String();
                        if(total == 1){
                            brwd = "a book";
                            range = "1/1";
                        }
                        else{
                            brwd = total + " books";
                            range = "1/"+total;
                        }

                        
                        if((JOptionPane.showConfirmDialog(AccountsUI_Update.this,
                                "User has borrowed " + brwd + ":\n\n"
                              + "\t"+range + "\n"
                              + "\t\tBook ID: " + issuedBooks.get(0).getBookID() + "\n"
                              + "\t\tTitle: " + issuedBooks.get(0).getBookTitle() + "\n"
                              + "\t\tDate Borrowed: " + convertUtilToSQL(issuedBooks.get(0).getDateBorrowed()) + "\n"
                              + "\t\tDate Due: " + convertUtilToSQL(issuedBooks.get(0).getDateDue()) + "\n\n"
                              + "Retrieve issued books?","Delete Error",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE))== JOptionPane.YES_OPTION){
                            
                            issuedDAO.retrieveIssuedBooksByUser(userID);
                            JOptionPane.showMessageDialog(AccountsUI_Update.this,"Books retrieved successfully!",
                                    "Retrieval Success",JOptionPane.INFORMATION_MESSAGE);
                            accDAO.DeleteAccount(userID);

                            accUI.refreshAccountsTable();
                            setVisible(false);
                            dispose();
                            reset();
                            JOptionPane.showMessageDialog(accUI, "Account deleted successfully!","Delete Success",JOptionPane.INFORMATION_MESSAGE);
                            
                        }else{
                            setVisible(false);
                        }
                    }
                   else{
                            accDAO.DeleteAccount(userID);

                            accUI.refreshAccountsTable();
                            JOptionPane.showMessageDialog(accUI, "Account deleted successfully!","Delete Success",JOptionPane.INFORMATION_MESSAGE);
                            setVisible(false);
                   }
            }
        }
        catch(Exception exc){
            JOptionPane.showMessageDialog(AccountsUI_Update.this,"Delete Failed: "+exc.getMessage(), "Delete Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void blockAccount(){
        String userID = jtxt_UserID.getText();
        String position = jComboBox_Position.getSelectedItem().toString();
        boolean status = account.getUserStatus();
        
        try{
            if(position.equals("Administrator")){
                
                if(status == true){
                    
                        if(JOptionPane.showConfirmDialog(AccountsUI_Update.this,
                                "Account is already blocked\nDo you wish to unblock?","Unblock Confirm",
                                JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION){
                            accDAO.BlockAccount(userID,UserID, false);
                        
                            accUI.refreshAccountsTable();
                            setVisible(false);
                            dispose();
                            reset();
                            JOptionPane.showMessageDialog(accUI,"Account has been unblocked!","Unblock Success",JOptionPane.INFORMATION_MESSAGE);
                        
                        }
                        else{
                            setVisible(false);
                            
                        }
                        
                    
                }
                else{
                    
                    
                    if((JOptionPane.showConfirmDialog(AccountsUI_Update.this,
                            "Account is an Admin,\nblock account?","Confirm Block",
                            JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE)) == JOptionPane.YES_OPTION){
                       
                        if(issuedDAO.checkIfUserBorrowed(userID)){
                            ArrayList<IssuedBooks> issuedBooks = issuedDAO.getIssuedBooksByUser(userID);
                            int total = issuedBooks.size();
                            String brwd = new String();
                            String range = new String();
                            if(total == 1){
                                brwd = "a book";
                                range = "1/1";
                            }
                            else{
                                brwd = total + " books";
                                range = "1/"+total;
                            }


                            if((JOptionPane.showConfirmDialog(AccountsUI_Update.this,
                                    "User has borrowed " + brwd + ":\n\n"
                                  + "\t"+range + "\n"
                                  + "\t\tBook ID: " + issuedBooks.get(0).getBookID() + "\n"
                                  + "\t\tTitle: " + issuedBooks.get(0).getBookTitle() + "\n"
                                  + "\t\tDate Borrowed: " + convertUtilToSQL(issuedBooks.get(0).getDateBorrowed()) + "\n"
                                  + "\t\tDate Due: " + convertUtilToSQL(issuedBooks.get(0).getDateDue()) + "\n\n"
                                  + "Retrieve issued books?","Delete Error",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE))== JOptionPane.YES_OPTION){

                                issuedDAO.retrieveIssuedBooksByUser(userID);
                                JOptionPane.showMessageDialog(AccountsUI_Update.this,"Books retrieved successfully!",
                                        "Retrieval Success",JOptionPane.INFORMATION_MESSAGE);
                                accDAO.BlockAccount(userID,UserID, true);

                                accUI.refreshAccountsTable();
                                setVisible(false);
                                dispose();
                                reset();
                                JOptionPane.showMessageDialog(accUI, "Account blocked successfully!","Block Success",JOptionPane.INFORMATION_MESSAGE);

                            }
                        }
                       else{
                                accDAO.BlockAccount(userID,UserID, true);

                                accUI.refreshAccountsTable();
                                setVisible(false);
                                dispose();
                                reset();
                                JOptionPane.showMessageDialog(accUI, "Account blocked successfully!","Block Success",JOptionPane.INFORMATION_MESSAGE);

                         
                       }
                    }
                    else{
                        setVisible(false);
                    }
                         
                        
                   
                }
                
            }
            else if(position.equals("Student Assistant")){
                if(status == true){
                    if(JOptionPane.showConfirmDialog(AccountsUI_Update.this,
                                "Account is already blocked\nDo you wish to unblock?","Unblock Confirm",
                                JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION){
                            accDAO.BlockAccount(userID,UserID, false);
                        
                            accUI.refreshAccountsTable();
                            setVisible(false);
                            dispose();
                            reset();
                            JOptionPane.showMessageDialog(accUI,"Account has been unblocked!","Unblock Success",JOptionPane.INFORMATION_MESSAGE);
                        
                        }
                        else{
                            setVisible(false);
                            
                        }
                }
                else{
                    
                
                    if((JOptionPane.showConfirmDialog(AccountsUI_Update.this,
                            "Account is a Student Assistant,\nblock account?",
                            "Confirm Block",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE)) == JOptionPane.YES_OPTION){
                        if(issuedDAO.checkIfUserBorrowed(userID)){
                            ArrayList<IssuedBooks> issuedBooks = issuedDAO.getIssuedBooksByUser(userID);
                            int total = issuedBooks.size();
                            String brwd = new String();
                            String range = new String();
                            if(total == 1){
                                brwd = "a book";
                                range = "1/1";
                            }
                            else{
                                brwd = total + " books";
                                range = "1/"+total;
                            }


                            if((JOptionPane.showConfirmDialog(AccountsUI_Update.this,
                                    "User has borrowed " + brwd + ":\n\n"
                                  + "\t"+range + "\n"
                                  + "\t\tBook ID: " + issuedBooks.get(0).getBookID() + "\n"
                                  + "\t\tTitle: " + issuedBooks.get(0).getBookTitle() + "\n"
                                  + "\t\tDate Borrowed: " + convertUtilToSQL(issuedBooks.get(0).getDateBorrowed()) + "\n"
                                  + "\t\tDate Due: " + convertUtilToSQL(issuedBooks.get(0).getDateDue()) + "\n\n"
                                  + "Retrieve issued books?","Delete Error",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE))== JOptionPane.YES_OPTION){

                                issuedDAO.retrieveIssuedBooksByUser(userID);
                                JOptionPane.showMessageDialog(AccountsUI_Update.this,"Books retrieved successfully!",
                                        "Retrieval Success",JOptionPane.INFORMATION_MESSAGE);
                                accDAO.BlockAccount(userID,UserID, true);

                                accUI.refreshAccountsTable();
                                setVisible(false);
                                dispose();
                                reset();
                                JOptionPane.showMessageDialog(accUI, "Account blocked successfully!","Block Success",JOptionPane.INFORMATION_MESSAGE);

                            }
                        }
                       else{
                                accDAO.BlockAccount(userID,UserID, true);

                                accUI.refreshAccountsTable();
                                setVisible(false);
                                dispose();
                                reset();
                                JOptionPane.showMessageDialog(accUI, "Account blocked successfully!","Block Success",JOptionPane.INFORMATION_MESSAGE);

                         
                       }
                    }
                    else{
                        setVisible(false);
                    }
                    
                }
            }
            else{
                if(status == true){
                    if(JOptionPane.showConfirmDialog(AccountsUI_Update.this,
                                "Account is already blocked\nDo you wish to unblock?","Unblock Confirm",
                                JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION){
                            accDAO.BlockAccount(userID,UserID, false);
                        
                            accUI.refreshAccountsTable();
                            setVisible(false);
                            dispose();
                            reset();
                            JOptionPane.showMessageDialog(accUI,"Account has been unblocked!","Unblock Success",JOptionPane.INFORMATION_MESSAGE);
                        
                        }
                        else{
                            setVisible(false);
                            
                        }
                }
                else{
                   
                    
                    if(issuedDAO.checkIfUserBorrowed(userID)){
                            ArrayList<IssuedBooks> issuedBooks = issuedDAO.getIssuedBooksByUser(userID);
                            int total = issuedBooks.size();
                            String brwd = new String();
                            String range = new String();
                            if(total == 1){
                                brwd = "a book";
                                range = "1/1";
                            }
                            else{
                                brwd = total + " books";
                                range = "1/"+total;
                            }


                            if((JOptionPane.showConfirmDialog(AccountsUI_Update.this,
                                    "User has borrowed " + brwd + ":\n\n"
                                  + "\t"+range + "\n"
                                  + "\t\tBook ID: " + issuedBooks.get(0).getBookID() + "\n"
                                  + "\t\tTitle: " + issuedBooks.get(0).getBookTitle() + "\n"
                                  + "\t\tDate Borrowed: " + convertUtilToSQL(issuedBooks.get(0).getDateBorrowed()) + "\n"
                                  + "\t\tDate Due: " + convertUtilToSQL(issuedBooks.get(0).getDateDue()) + "\n\n"
                                  + "Retrieve issued books?","Delete Error",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE))== JOptionPane.YES_OPTION){

                                issuedDAO.retrieveIssuedBooksByUser(userID);
                                JOptionPane.showMessageDialog(AccountsUI_Update.this,"Books retrieved successfully!",
                                        "Retrieval Success",JOptionPane.INFORMATION_MESSAGE);
                                accDAO.BlockAccount(userID,UserID, true);

                                accUI.refreshAccountsTable();
                                setVisible(false);
                                dispose();
                                reset();
                                JOptionPane.showMessageDialog(accUI, "Account blocked successfully!","Block Success",JOptionPane.INFORMATION_MESSAGE);

                            }
                        }
                       else{
                                accDAO.BlockAccount(userID,UserID, true);

                                accUI.refreshAccountsTable();
                                setVisible(false);
                                dispose();
                                reset();
                                JOptionPane.showMessageDialog(accUI, "Account blocked successfully!","Block Success",JOptionPane.INFORMATION_MESSAGE);

                         
                       }
                }
            }
        }
        catch(Exception exc){
            JOptionPane.showMessageDialog(AccountsUI_Update.this,"Block Failed: " + exc.getMessage(),"Block Error",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private java.sql.Date convertUtilToSQL(Date uDate){
        java.sql.Date sDate = new java.sql.Date(uDate.getTime());
        return sDate;
    }
    
    private void reset(){
        jtxt_UserID.setText("");
        jtxt_FirstName.setText("");
        jtxt_LastName.setText("");
        jComboBox_Position.setSelectedIndex(0);
    }
    
    private void populateGUI(Accounts account){
        jtxt_UserID.setText(account.getUserID());
        jtxt_FirstName.setText(account.getUserFirstName());
        jtxt_LastName.setText(account.getUserLastName());
        jComboBox_Position.setSelectedItem(account.getUserPosition());
    }
}
