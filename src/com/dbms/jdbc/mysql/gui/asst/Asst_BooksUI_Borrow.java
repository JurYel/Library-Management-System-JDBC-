/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dbms.jdbc.mysql.gui.asst;

/**
 *
 * @author Jur Yel
 */
import com.dbms.jdbc.mysql.core.Books;
import com.dbms.jdbc.mysql.dao.BooksDAO;
import com.dbms.jdbc.mysql.core.IssuedBooks;
import com.dbms.jdbc.mysql.dao.IssuedBooksDAO;
import com.dbms.jdbc.mysql.core.Accounts;
import com.dbms.jdbc.mysql.dao.AccountsDAO;
import java.util.Date;
import java.util.ArrayList;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import java.util.Iterator;


public class Asst_BooksUI_Borrow extends javax.swing.JDialog {

    /**
     * Creates new form Asst_BooksUI_Operations
     */    
    private static final DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    
    private Books theBook;
    private BooksDAO bookDAO;
    private IssuedBooksDAO issuedDAO;
    private AccountsDAO accDAO;
    private Accounts account;
    private Asst_BooksUI bookUI;
    private String User_ID;
    private int userLevel;
    
    public Asst_BooksUI_Borrow(int level,String userID,Books book,BooksDAO dao, Asst_BooksUI ui){
        try{
            issuedDAO = new IssuedBooksDAO();
            accDAO = new AccountsDAO();
        }
        catch(Exception exc){
            JOptionPane.showMessageDialog(Asst_BooksUI_Borrow.this,"DAO Failed: "+exc.getMessage(),"DAO Error",JOptionPane.ERROR_MESSAGE);
        }
        initComponents();
        setLocationRelativeTo(ui);
        userLevel = level;
        User_ID = userID;
        theBook = book;
        bookUI = ui;
        bookDAO = dao;
        populateGUI(theBook);
        disableAll();
    }
    
    public Asst_BooksUI_Borrow(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jComboBox_Users = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox_Category = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jtxt_BookID = new javax.swing.JTextField();
        jtxt_Title = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jtxt_Author = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jSpinner_Rack = new javax.swing.JSpinner();
        jtxt_Year = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jSpinner_Quantity = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Borrow Book");

        jPanel1.setBackground(new java.awt.Color(102, 153, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jComboBox_Users.setBackground(new java.awt.Color(204, 204, 255));
        jComboBox_Users.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jComboBox_Users.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "User ID" }));

        jLabel1.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jLabel1.setText("User ID:");

        jLabel2.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jLabel2.setText("Category:");

        jComboBox_Category.setBackground(new java.awt.Color(204, 204, 255));
        jComboBox_Category.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jComboBox_Category.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Computer Studies", "Engineering and Architecture", "Arts and Sciences", "Business Management", "Politics", "Literature", "History" }));

        jLabel3.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jLabel3.setText("Book ID:");

        jtxt_BookID.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jtxt_BookID.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jtxt_Title.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jtxt_Title.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel4.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jLabel4.setText("Book Title:");

        jLabel5.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jLabel5.setText("Book Author:");

        jtxt_Author.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jtxt_Author.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel6.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jLabel6.setText("Rack:");
        jLabel6.setToolTipText("");

        jSpinner_Rack.setModel(new javax.swing.SpinnerNumberModel(1, 1, 14, 1));

        jtxt_Year.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jtxt_Year.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtxt_Year.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel7.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jLabel7.setText("Year Published:");

        jLabel8.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jLabel8.setText("Quantity:");

        jSpinner_Quantity.setModel(new javax.swing.SpinnerNumberModel(1, 1, 50, 1));

        jButton1.setBackground(new java.awt.Color(102, 102, 255));
        jButton1.setFont(new java.awt.Font("Josefin Sans", 0, 16)); // NOI18N
        jButton1.setText("Borrow Book");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox_Users, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox_Category, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(jSpinner_Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jtxt_Year, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(jtxt_Title, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(jtxt_BookID, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(jtxt_Author, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(jSpinner_Rack, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(89, 89, 89)))))
                .addContainerGap(52, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(115, 115, 115))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox_Users, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox_Category, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxt_BookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxt_Title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxt_Author, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner_Rack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxt_Year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner_Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        borrowBook(userLevel);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Asst_BooksUI_Borrow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Asst_BooksUI_Borrow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Asst_BooksUI_Borrow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Asst_BooksUI_Borrow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Asst_BooksUI_Borrow dialog = new Asst_BooksUI_Borrow(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox_Category;
    private javax.swing.JComboBox<String> jComboBox_Users;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSpinner jSpinner_Quantity;
    private javax.swing.JSpinner jSpinner_Rack;
    private javax.swing.JTextField jtxt_Author;
    private javax.swing.JTextField jtxt_BookID;
    private javax.swing.JTextField jtxt_Title;
    private javax.swing.JTextField jtxt_Year;
    // End of variables declaration//GEN-END:variables
    
    private void borrowBook(int userLvl){
        String id = jtxt_BookID.getText();
        String userID = jComboBox_Users.getSelectedItem().toString();
        Date dateBrwd = new Date();
        Date dateDue = new Date();
        
        sdf.format(dateBrwd);
        
        int year = dateBrwd.getYear();
        int month = dateBrwd.getMonth();
        int day = dateBrwd.getDate();
        
        dateDue.setYear(year);
        dateDue.setMonth(month);
        dateDue.setDate((day+5));
        
        
        
        try{
            String title = issuedDAO.getBookTitleByUserID(id);
            IssuedBooks issuedBook = new IssuedBooks(id,title,userID,dateBrwd,dateDue);
            if(userLvl == 0 || userLvl == 1){
                if((userID.equals("User ID"))){
                    setVisible(false);
                    JOptionPane.showMessageDialog(bookUI,"Select a User ID","Issue Error",JOptionPane.ERROR_MESSAGE);
                }
                else{
                    if(accDAO.checkIfBlocked(userID)){
                        setVisible(false);
                        JOptionPane.showMessageDialog(bookUI, "Unable to borrow book, account has been blocked!","Issue Error",JOptionPane.ERROR_MESSAGE);
                    }
                    else{
                        if(issuedDAO.checkIfAlreadyBorrowed(userID, id)){
                        /* Check if user already borrowed the book */

                            setVisible(false);
                            retrieveIssuedBook();
                        }
                        else{
                            /* Perform Operation */
                            int total = issuedDAO.getNumberOfBooksBorrowed(userID);
                            int quantity = bookDAO.getBookQuantity(id);
                            if(total <= 5){
                               issuedDAO.IssueBook(issuedBook,User_ID,quantity);


                               setVisible(false);
                               bookUI.refreshBooksTable();
                               JOptionPane.showMessageDialog(bookUI,
                                        "Book borrowed successfully!\n\n"
                                      + "\tDate Borrowed: " + convertUtilToSQL(dateBrwd) + "\n"
                                      + "\tDate Due: "+ convertUtilToSQL(dateDue) + "\n\n"
                                      + "Knowledge is Power!","Issue Success",JOptionPane.INFORMATION_MESSAGE);
                            }
                            else{
                                setVisible(false);
                                bookUI.refreshBooksTable();
                                JOptionPane.showMessageDialog(bookUI,"You can only borrow five books at most!","Issue Error",JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }
                }
            }
            else{
                if(accDAO.checkIfBlocked(userID)){
                        setVisible(false);
                        JOptionPane.showMessageDialog(bookUI, "Unable to borrow book, account has been blocked!","Issue Error",JOptionPane.ERROR_MESSAGE);
                    }
                    else{
                        if(issuedDAO.checkIfAlreadyBorrowed(userID, id)){
                        /* Check if user already borrowed the book */

                            setVisible(false);
                            retrieveIssuedBook();
                        }
                        else{
                            /* Perform Operation */
                            int total = issuedDAO.getNumberOfBooksBorrowed(userID);
                            int quantity = bookDAO.getBookQuantity(id);
                            if(total <= 5){
                               issuedDAO.IssueBook(issuedBook,User_ID,quantity);


                               setVisible(false);
                               bookUI.refreshBooksTable();
                               JOptionPane.showMessageDialog(bookUI,
                                        "Book borrowed successfully!\n\n"
                                      + "\tDate Borrowed: " + convertUtilToSQL(dateBrwd) + "\n"
                                      + "\tDate Due: "+ convertUtilToSQL(dateDue) + "\n\n"
                                      + "Knowledge is Power!","Issue Success",JOptionPane.INFORMATION_MESSAGE);
                            }
                            else{
                                setVisible(false);
                                bookUI.refreshBooksTable();
                                JOptionPane.showMessageDialog(bookUI,"You can only borrow five books at most!","Issue Error",JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }
            }
            
            
            
        }
        catch(Exception exc){
            JOptionPane.showMessageDialog(Asst_BooksUI_Borrow.this,"Issue Failed: "+exc.getMessage(),"Issue Error",JOptionPane.ERROR_MESSAGE);
//            exc.printStackTrace();
        }
    }
    private void retrieveIssuedBook(){
        String bkID = jtxt_BookID.getText();
        String userID = jComboBox_Users.getSelectedItem().toString();
        try{
            String title = issuedDAO.getBookTitleByUserID(bkID);
            String brwd = issuedDAO.getBookDateBorrowed(userID, bkID);
            String due = issuedDAO.getBookDateDue(userID, bkID);
            
            JOptionPane.showMessageDialog(bookUI, 
                        "You already borrowed this book!\n\n"
                      + "\t\tBook ID: " + bkID + "\n"
                      + "\t\tBook Title: " + title + "\n"
                      + "\t\tDate Borrowed: " + brwd + "\n"
                      + "\t\tDate Due: " + due + "\n\n"
                      + "Borrow a different book.","Issue Error",JOptionPane.ERROR_MESSAGE);
        }
        catch(Exception exc){
            JOptionPane.showMessageDialog(Asst_BooksUI_Borrow.this,"Retrieval Failed: "+exc.getMessage(),"Retrieval Error",JOptionPane.ERROR_MESSAGE);
//            exc.printStackTrace();
        }
    }
    
    private void populateGUI(Books book){
        try{
            ArrayList<Accounts> accounts = accDAO.getAllAccounts();
            int totalAcc = accounts.size();
            
            if(userLevel == 2){
                jComboBox_Users.addItem(User_ID);
                jComboBox_Users.setSelectedItem(User_ID);
                jComboBox_Users.setEnabled(false);
            }
            else{
                jComboBox_Users.setEnabled(true);
                for(Iterator<Accounts> it = accounts.iterator(); it.hasNext();){
                    account = it.next();
                    
                    if(!(account.getUserID().equals(User_ID))){
                        jComboBox_Users.addItem(account.getUserID());
                    }
                }
            }
            
            jComboBox_Category.setSelectedItem(book.getBookCategory());
            jtxt_BookID.setText(book.getBookID());
            jtxt_Title.setText(book.getBookTitle());
            jtxt_Author.setText(book.getBookAuthor());
            jSpinner_Rack.setValue(book.getRack());
            jtxt_Year.setText(String.valueOf(book.getYearPublished()));
            jSpinner_Quantity.setValue(book.getQuantity());
            
        }
        catch(Exception exc){
            JOptionPane.showMessageDialog(Asst_BooksUI_Borrow.this,"Load Failed: "+exc.getMessage(),"Load Error",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void disableAll(){
        jComboBox_Category.setEnabled(false);
        jtxt_BookID.setEnabled(false);
        jtxt_Title.setEnabled(false);
        jtxt_Author.setEnabled(false);
        jSpinner_Rack.setEnabled(false);
        jtxt_Year.setEnabled(false);
        jSpinner_Quantity.setEnabled(false);
    }
    
    private java.sql.Date convertUtilToSQL(Date uDate){
        java.sql.Date sDate = new java.sql.Date(uDate.getTime());
        return sDate;
    }
}
